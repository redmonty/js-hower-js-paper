@charset "UTF-8";

/// Selector(s) of at relationship.
///
/// @param {String} $modifier - List of modifier that will come after ".[block]--"
///
/// @returns {String} - .[block]--[modifier]
///
/// @see {mixin} at

@function at-selector($modifiers...) {
  $block: get-block(unquote("#{&}"));
  $classes: ();
  
  @each $modifier in $modifiers {
    $classes: append($classes, unquote(".#{$block}#{$bem-modifier-separator}#{$modifier}"));
  }
  
  @return unquote("#{implode($classes)} &");
}

/// Selector of adjacent relationship.
///
/// @param {String} $element - Name of element that will come after ".[block]__"
///
/// @returns {String} - & + .[block]__[element]
///
/// @see {mixin} next

@function next-selector($element) {
  $block: get-block(unquote("#{&}"));
  
  @return unquote("& + .#{$block}#{$bem-element-separator}#{$element}");
}

/// Selector of duo relationship.
///
/// @returns {String} - & + &
///
/// @see {mixin} duo

@function duo-selector($debug: false) {
  $list: explode(unquote("#{&}"), ' ');
  
  @if ($debug == true and length($list) == 0) {
    $list: ('&');
  }
  
  $last: nth($list, length($list));
  
  @return unquote("& + #{$last}");
}

/// Selector of sibling relationship.
///
/// @param {String} $element - Name of element that will come after ".[block]__"
///
/// @returns {String} - & ~ .[block]__[element]
///
/// @see {mixin} with

@function with-selector($element) {
  $block: get-block(unquote("#{&}"));
  
  @return unquote("& ~ .#{$block}#{$bem-element-separator}#{$element}");
}

/// Selector(s) of while relationship.
///
/// @param {String} $modifier - List of modifiers that will come after ".[block]--"
///
/// @returns {String} - .[block]--[modifier]
///
/// @see {mixin} while

@function while-selector($modifier) {
  $block: get-block(unquote("#{&}"));
  
  @return unquote("&.#{$block}#{$bem-modifier-separator}#{$modifier}");
}
