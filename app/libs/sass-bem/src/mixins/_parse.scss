@charset "UTF-8";

/// Parse multiple mixins, pseudo elements and other states.
///
/// @param {String | List} $selectors - List or String of arguments, to generate selector.
///
/// @example scss - Usage
///     @include b('list') {
///         @include parse('&', 'm:inline', ':hover', '[disabled]') {
///             color: black;
///         }
///     }
///
/// @example css - Output
///     .list, .list--inline, .list:hover, .list[disabled] {
///         color: black;
///     }
///
/// @throws Mixin doesn't exist

@mixin parse($selectors...) {
  $parent: unquote("#{&}");
  $collection: ();
  
  @each $selector in $selectors {
    @if (map-get($bem-shortcodes, $selector)) {
      $selectors: splice($selectors, $selector);
      
      @each $mixin in map-get($bem-shortcodes, $selector) {
        $selectors: append($selectors, $mixin);
      }
    }
  }
  
  @each $selector in $selectors {
    $parts: explode($selector, ':');
    
    @if (str-length(nth($parts, 1)) == 0) {
      $selector: unquote("#{$parent}:#{nth($parts, 2)}");
    } @else if (length($parts) == 1) {
      $item: nth($parts, 1);
      
      @if (str-index(quote($item), quote('&'))) {
        $selector: unquote("#{str-replace(quote($item), quote('&'), quote($parent))}");
      } @else {
        @if mixin-exists(nth($parts, 1)) {
          $selector: call(unquote("#{$item}-selector"));
        } @else {
          $selector: unquote("#{$parent}#{$item}");
        }
      }
    } @else {
      $item: implode($parts, ':');
      
      @if (str-index(quote($item), quote('&'))) {
        $selector: unquote("#{str-replace(quote($item), quote('&'), quote($parent))}");
      } @else {
        @if mixin-exists(nth($parts, 1)) {
          $function: unquote("#{nth($parts, 1)}-selector");
          $selector: call($function, nth($parts, 2));
        } @else {
          @error "Mixin #{nth($parts, 1)} doesn't exists!";
        }
      }
    }
    
    $collection: append($collection, $selector);
  }
  
  @at-root {
    #{implode($collection, ', ')} {
      @content;
    }
  }
}

/// @alias parse

@mixin p($selectors...) {
  @include parse($selectors...) {
    @content;
  }
}
